local unfold = require 'unfold.unfold'
local log = require 'unfold.unfold_log'
local M = {}

function string.TrimPath(str)
    return str:sub(2, #str)
end

function M.get_commands()
    return {
        {
            label = "Turn Into Collection",
            locations = { "Assets", "Edit" },
            query = { selection = { type = "resource", cardinality = "one" } },
            active = function(opts)
                return editor.get(opts.selection, "path"):EndsWith(".gltf")
            end,
            run = function(opts)
                -- config file setup
                local config_path = editor.ui.show_resource_dialog({
                    extensions = { "lua" },
                    title = "Select a configuration lua file"
                })
                if not config_path then
                    return
                end
                config_path = config_path:sub(2, #config_path)

                local config = dofile(config_path)
                if not config then
                    log.Error("Configuration file must return a table")
                end

                -- scene data setup
                local scene_path = editor.get(opts.selection, "path")
                scene_path = scene_path:sub(2, #scene_path)

                local scene_file = io.open(scene_path, "r")
                local scene_data
                if scene_file then
                    scene_data = scene_file:read("*a")
                    scene_file:close()
                else

                end
                unfold.UnfoldString(scene_data, config)
            end
        }
    }
end

return M

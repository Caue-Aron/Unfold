local unfold = require 'unfold.unfold'
local log = require 'unfold.unfold_log'
local M = {}

local function GetProjectDir()
    local dir = editor.external_file_attributes("game.project").path
    return dir:sub(1, #dir - 13)
end

local function toggle(n, v)
    return v
end

local function copy(t, o)
    local ret = {}
    for key, value in pairs(o) do
        ret[key] = value
    end
    return ret
end

local function assoc(t, k, v)
    t = t or {}
    if t[k] == v then
        return t
    else
        local ret = {}
        for key, value in pairs(t) do
            ret[key] = value
        end
        ret[k] = v
        return ret
    end
end

local quick_config_dialog = editor.ui.component(function(props)
    local ids = props.ids
    local nodes_ids = ids.nodes
    -- local scene_ids = ids.scenes
    local children = {}
    local config_id, set_config_id = editor.ui.use_state(props.config_id)
    local file_name, set_file_name = editor.ui.use_state(props.scene_name .. ".config")

    local valid = true
    for i = 1, #nodes_ids do
        local node_id = nodes_ids[i]
        local path_id = config_id[node_id]
        local issue
        if path_id and path_id ~= "" then
            if not editor.resource_attributes(path_id).exists then
                issue = { severity = editor.ui.ISSUE_SEVERITY.ERROR, message = "File does not exist" }
            elseif not string.EndsWith(path_id, ".go") then
                issue = { severity = editor.ui.ISSUE_SEVERITY.ERROR, message = "File must be a gameobject" }
            end
        elseif not path_id or path_id == "" then
            issue = { severity = editor.ui.ISSUE_SEVERITY.WARNING, message = "Required" }
        end

        if issue then
            valid = false
        end

        children[i + 2] = {
            editor.ui.label({
                text = node_id,
                alignment = editor.ui.ALIGNMENT.RIGHT,
            }),
            editor.ui.resource_field({
                extensions = { "go" },
                on_value_changed = function(path)
                    set_config_id(assoc, node_id, path)
                end,
                issue = issue
            })
        }
    end

    local issue
    if file_name and file_name:find("[<>:%\"/\\|%?%*]") then
        issue = { severity = editor.ui.ISSUE_SEVERITY.ERROR, message = "Invalid Name" }
    elseif not file_name or file_name == "" then
        issue = { severity = editor.ui.ISSUE_SEVERITY.WARNING, message = "Required" }
    end
    children[1] = {
        editor.ui.label({
            text = "Config File Name",
            alignment = editor.ui.ALIGNMENT.RIGHT,
        }),
        editor.ui.string_field({
            value = file_name,
            on_value_changed = set_file_name,
            issue = issue
        })
    }
    children[2] = {
        editor.ui.separator({
            grow = true,
            column_span = 2
        })
    }

    return editor.ui.dialog({
        title = "Quick Configuration Setup",
        content = editor.ui.grid({
            padding = editor.ui.PADDING.LARGE,
            columns = { {}, { grow = true } },
            children = children
        }),
        buttons = {
            editor.ui.dialog_button({
                text = "Cancel",
                default = false
            }),
            editor.ui.dialog_button({
                text = "Save Configuration",
                result = { config_id = config_id, file_name = file_name },
                default = true,
                enabled = valid
            }),
        }
    })
end)

local function NewConfigFile(scene_path)
    local path, name = string.GetPathAndFile(scene_path)
    local result = editor.ui.show_dialog(quick_config_dialog({
        ids = unfold.GetDistinctID(scene_path),
        scene_name = string.StripExtension(name),
        config_id = {}
    }))


    print(GetProjectDir())
    if type(result) == "table" then
        local file_name = result.file_name
        local config_id = result.config_id

        local output_path = editor.ui.show_external_directory_dialog({
            title = "Output path",
            path = string.TrimPath(path)
        })

        if output_path and output_path ~= "" then
            local config_file, err = io.open(output_path .. "/" .. file_name .. ".lua", "w+")
            if config_file then
                local file_content = "---@type UnfoldConfig\nlocal M = {\n\t_id = {"
                for k, v in pairs(config_id) do
                    file_content = file_content .. "\n\t\t" .. k .. ' = "' .. v .. '",'
                end
                file_content = file_content .. "\n\t}\n}\n\nreturn M"

                config_file:write(file_content)
                config_file:close()
                return output_path
            else
                error(output_path .. "/" .. file_name .. ".lua")
            end
        end
    end
end

local unfold_dialog = editor.ui.component(function(props)
    local config_path, set_config_path = editor.ui.use_state("")
    local output_name, set_output_path = editor.ui.use_state(props.scene_name)
    local quick_config, set_quick_config = editor.ui.use_state(props.quick_config)
    local config_file_severity, set_config_file_severity = editor.ui.use_state(editor.ui.ISSUE_SEVERITY.WARNING)
    local config_file_severity_msg, set_config_file_severity_msg = editor.ui.use_state("Required")
    local focus, set_focus = editor.ui.use_state(true)

    local issue
    if config_file_severity and config_file_severity_msg and
        config_file_severity ~= "" and config_file_severity_msg ~= ""
    then
        issue = { severity = config_file_severity, message = config_file_severity_msg }
    end

    return editor.ui.dialog({
        title = props.title,
        content = editor.ui.grid({
            padding = editor.ui.PADDING.LARGE,
            columns = { {}, { grow = true } },
            children = {
                {
                    editor.ui.label({
                        text = "Collection Name",
                        alignment = editor.ui.ALIGNMENT.RIGHT,
                    }),
                    editor.ui.string_field({
                        value = output_name,
                        enabled = focus,
                        on_value_changed = set_output_path
                    })
                },
                {
                    editor.ui.label({
                        text = "Configuration File",
                        alignment = editor.ui.ALIGNMENT.RIGHT,
                    }),
                    editor.ui.resource_field({
                        title = "Select Configuration file",
                        extensions = { "lua" },
                        issue = issue,
                        enabled = focus,
                        on_value_changed = function(path)
                            set_config_path(toggle, "")
                            if path and path ~= "" and not editor.resource_attributes(path).exists then
                                set_config_file_severity(toggle, editor.ui.ISSUE_SEVERITY.ERROR)
                                set_config_file_severity_msg(toggle, "File doesn't exist")
                            elseif path and path ~= "" and not string.EndsWith(path, ".lua") then
                                set_config_file_severity(toggle, editor.ui.ISSUE_SEVERITY.ERROR)
                                set_config_file_severity_msg(toggle, "File must be a Lua Script")
                            elseif not path or path == "" then
                                set_config_file_severity(toggle, editor.ui.ISSUE_SEVERITY.WARNING)
                                set_config_file_severity_msg(toggle, "Required")
                            else
                                set_config_file_severity(toggle, "")
                                set_config_file_severity_msg(toggle, "")
                                set_config_path(toggle, path)
                            end
                        end
                    })
                },
                {
                    editor.ui.button({
                        text = "Quick Configuration Setup",
                        icon = editor.ui.ICON.OPEN_RESOURCE,
                        alignment = editor.ui.ALIGNMENT.RIGHT,
                        column_span = 2,
                        enabled = focus,
                        on_pressed = function()
                            set_focus(toggle, false)
                            local new_path = NewConfigFile(props.scene_path)
                            set_focus(toggle, true)
                        end
                    })
                }
            }
        }),
        buttons = {
            editor.ui.dialog_button({
                text = "Cancel",
                default = false,
                enabled = focus
            }),
            editor.ui.dialog_button({
                text = "Create Collection",
                result = { quick_config = quick_config, output_name = output_name, config_path = config_path },
                default = true,
                enabled = config_path ~= "" and focus
            }),
        }
    })
end)

local function Unfold(name, scene_path, config_path, save_dialog_path)
    local output_path = editor.ui.show_external_directory_dialog({
        title = "Output path",
        path = save_dialog_path
    })
    if output_path then
        local full_path = output_path .. "/" .. name .. ".collection"
        unfold.UnfoldFile(scene_path, config_path, full_path)
        log.Debug("Collection properly created at /" .. full_path:gsub("\\", "/"))
    end
end

function M.get_commands()
    return {
        {
            label = "Turn Into Collection",
            locations = { "Assets" },
            query = { selection = { type = "resource", cardinality = "one" } },
            active = function(opts)
                return string.EndsWith(editor.get(opts.selection, "path"), ".gltf")
            end,
            run = function(opts)
                local scene_path = editor.get(opts.selection, "path")
                local path, name = string.GetPathAndFile(string.TrimPath(scene_path))
                name = string.StripExtension(name)
                local result = editor.ui.show_dialog(unfold_dialog({
                    title = "Unfold",
                    scene_name = name,
                    scene_path = scene_path,
                    quick_config = {}
                }))

                if type(result) == "table" then
                    local config
                    if result.config_path == "Quick Configuration" then
                        config = { _id = result.quick_config }
                    else
                        config = result.config_path
                    end

                    if #result.output_name == 0 then
                        name = name
                    else
                        name = result.output_name
                    end
                    Unfold(name, scene_path, config, path)
                end
            end
        },
        {
            label = "Quick Config Setup",
            locations = { "Assets" },
            query = { selection = { type = "resource", cardinality = "one" } },
            active = function(opts)
                return string.EndsWith(editor.get(opts.selection, "path"), ".gltf")
            end,
            run = function(opts)
                local scene_path = editor.get(opts.selection, "path")
                NewConfigFile(scene_path)
            end
        }
    }
end

return M
